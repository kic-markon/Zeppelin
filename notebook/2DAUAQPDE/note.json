{
  "paragraphs": [
    {
      "text": "%md\nThe following example is taken from:\nAdvanced Analytics with Spark, 2nd Edition\nby Sandy Ryza, Uri Laserson, Sean Owen and Josh Wills\n(c) O\u0027Reilly, 2017\n\nInitial steps in the \"Taxicab\" problem with Scala.",
      "user": "anonymous",
      "dateUpdated": "Apr 14, 2018 10:35:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe following example is taken from:\u003cbr/\u003eAdvanced Analytics with Spark, 2nd Edition\u003cbr/\u003eby Sandy Ryza, Uri Laserson, Sean Owen and Josh Wills\u003cbr/\u003e(c) O\u0026rsquo;Reilly, 2017\u003c/p\u003e\n\u003cp\u003eInitial steps in the \u0026ldquo;Taxicab\u0026rdquo; problem with Scala.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1523712914158_-864487273",
      "id": "20180414-223514_1104425339",
      "dateCreated": "Apr 14, 2018 10:35:14 PM",
      "dateStarted": "Apr 14, 2018 10:35:34 PM",
      "dateFinished": "Apr 14, 2018 10:35:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/*\n * Copyright 2015 and onwards Sanford Ryza, Uri Laserson, Sean Owen and Joshua Wills\n *\n * See LICENSE file for further information.\n */\n\n//package com.cloudera.datascience.geotime\n\nimport java.text.SimpleDateFormat\nimport java.util.Locale\nimport java.util.concurrent.TimeUnit\n\nimport org.apache.spark.sql.{DataFrame, Row, SparkSession}\nimport org.apache.spark.sql.functions._\n\nimport com.esri.core.geometry.Point\nimport spray.json._\n\nimport com.cloudera.datascience.geotime.GeoJsonProtocol._\n\n\nclass RichRow(row: Row) {\n  def getAs[T](field: String): Option[T] \u003d\n    if (row.isNullAt(row.fieldIndex(field))) None else Some(row.getAs[T](field))\n}\n\ncase class Trip(\n  license: String,\n  pickupTime: Long,\n  dropoffTime: Long,\n  pickupX: Double,\n  pickupY: Double,\n  dropoffX: Double,\n  dropoffY: Double)\n\nobject RunGeoTime extends Serializable {\n\n  def main(args: Array[String]): Unit \u003d {\n    val spark \u003d SparkSession.builder().getOrCreate()\n    import spark.implicits._\n\n    val taxiRaw \u003d spark.read.option(\"header\", \"true\").csv(\"/Users/markon/ITU/taxidata\")\n    val taxiParsed \u003d taxiRaw.rdd.map(safe(parse))\n    val taxiGood \u003d taxiParsed.map(_.left.get).toDS\n    taxiGood.cache()\n\n    val hours \u003d (pickup: Long, dropoff: Long) \u003d\u003e {\n      TimeUnit.HOURS.convert(dropoff - pickup, TimeUnit.MILLISECONDS)\n    }\n    val hoursUDF \u003d udf(hours)\n\n    taxiGood.groupBy(hoursUDF($\"pickupTime\", $\"dropoffTime\").as(\"h\")).count().sort(\"h\").show()\n\n    // register the UDF, use it in a where clause\n    spark.udf.register(\"hours\", hours)\n    val taxiClean \u003d taxiGood.where(\"hours(pickupTime, dropoffTime) BETWEEN 0 AND 3\")\n\n    val geojson \u003d scala.io.Source.fromURL(this.getClass.getResource(\"/nyc-boroughs.geojson\")).mkString\n\n    val features \u003d geojson.parseJson.convertTo[FeatureCollection]\n    val areaSortedFeatures \u003d features.sortBy { f \u003d\u003e \n      val borough \u003d f(\"boroughCode\").convertTo[Int]\n      (borough, -f.geometry.area2D())\n    }\n\n    val bFeatures \u003d spark.sparkContext.broadcast(areaSortedFeatures)\n\n    val bLookup \u003d (x: Double, y: Double) \u003d\u003e {\n      val feature: Option[Feature] \u003d bFeatures.value.find(f \u003d\u003e {\n        f.geometry.contains(new Point(x, y))\n      })\n      feature.map(f \u003d\u003e {\n        f(\"borough\").convertTo[String]\n      }).getOrElse(\"NA\")\n    }\n    val boroughUDF \u003d udf(bLookup)\n\n    taxiClean.groupBy(boroughUDF($\"dropoffX\", $\"dropoffY\")).count().show()\n    val taxiDone \u003d taxiClean.where(\"dropoffX !\u003d 0 and dropoffY !\u003d 0 and pickupX !\u003d 0 and pickupY !\u003d 0\")\n    taxiDone.groupBy(boroughUDF($\"dropoffX\", $\"dropoffY\")).count().show()\n\n    taxiGood.unpersist()\n\n    val sessions \u003d taxiDone.\n        repartition($\"license\").\n        sortWithinPartitions($\"license\", $\"pickupTime\").\n        cache()\n    def boroughDuration(t1: Trip, t2: Trip): (String, Long) \u003d {\n      val b \u003d bLookup(t1.dropoffX, t1.dropoffY)\n      val d \u003d (t2.pickupTime - t1.dropoffTime) / 1000\n      (b, d)\n    }\n\n    val boroughDurations: DataFrame \u003d\n      sessions.mapPartitions(trips \u003d\u003e {\n        val iter: Iterator[Seq[Trip]] \u003d trips.sliding(2)\n        val viter \u003d iter.filter(_.size \u003d\u003d 2).filter(p \u003d\u003e p(0).license \u003d\u003d p(1).license)\n        viter.map(p \u003d\u003e boroughDuration(p(0), p(1)))\n      }).toDF(\"borough\", \"seconds\")\n    boroughDurations.\n      where(\"seconds \u003e 0\").\n      groupBy(\"borough\").\n      agg(avg(\"seconds\"), stddev(\"seconds\")).\n      show()\n\n    boroughDurations.unpersist()\n  }\n\n  def safe[S, T](f: S \u003d\u003e T): S \u003d\u003e Either[T, (S, Exception)] \u003d {\n    new Function[S, Either[T, (S, Exception)]] with Serializable {\n      def apply(s: S): Either[T, (S, Exception)] \u003d {\n        try {\n          Left(f(s))\n        } catch {\n          case e: Exception \u003d\u003e Right((s, e))\n        }\n      }\n    }\n  }\n\n  def parseTaxiTime(rr: RichRow, timeField: String): Long \u003d {\n    val formatter \u003d new SimpleDateFormat(\n       \"yyyy-MM-dd HH:mm:ss\", Locale.ENGLISH)\n    val optDt \u003d rr.getAs[String](timeField)\n    optDt.map(dt \u003d\u003e formatter.parse(dt).getTime).getOrElse(0L)\n  }\n\n  def parseTaxiLoc(rr: RichRow, locField: String): Double \u003d {\n    rr.getAs[String](locField).map(_.toDouble).getOrElse(0.0)\n  }\n\n  def parse(line: Row): Trip \u003d {\n    val rr \u003d new RichRow(line)\n    Trip(\n      license \u003d rr.getAs[String](\"hack_license\").orNull,\n      pickupTime \u003d parseTaxiTime(rr, \"pickup_datetime\"),\n      dropoffTime \u003d parseTaxiTime(rr, \"dropoff_datetime\"),\n      pickupX \u003d parseTaxiLoc(rr, \"pickup_longitude\"),\n      pickupY \u003d parseTaxiLoc(rr, \"pickup_latitude\"),\n      dropoffX \u003d parseTaxiLoc(rr, \"dropoff_longitude\"),\n      dropoffY \u003d parseTaxiLoc(rr, \"dropoff_latitude\")\n    )\n  }\n}\n",
      "user": "anonymous",
      "dateUpdated": "Mar 13, 2018 11:32:19 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "import java.text.SimpleDateFormat\nimport java.util.Locale\nimport java.util.concurrent.TimeUnit\nimport org.apache.spark.sql.{DataFrame, Row, SparkSession}\nimport org.apache.spark.sql.functions._\nimport com.esri.core.geometry.Point\nimport spray.json._\n\u003cconsole\u003e:37: error: object cloudera is not a member of package com\n       import com.cloudera.datascience.geotime.GeoJsonProtocol._\n                  ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520771572786_-1836852303",
      "id": "20180311-213252_1739629244",
      "dateCreated": "Mar 11, 2018 9:32:52 PM",
      "dateStarted": "Mar 13, 2018 11:32:19 AM",
      "dateFinished": "Mar 13, 2018 11:32:47 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import com.cloudera.datascience.geotime.GeoJsonProtocol._",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 10:20:04 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:40: error: object cloudera is not a member of package com\n       import com.cloudera.datascience.geotime.GeoJsonProtocol._\n                  ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1520771609239_-836643080",
      "id": "20180311-213329_288973007",
      "dateCreated": "Mar 11, 2018 9:33:29 PM",
      "dateStarted": "Mar 22, 2018 10:20:04 PM",
      "dateFinished": "Mar 22, 2018 10:20:04 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import spray.json._\n",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 10:20:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import spray.json._\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1521696422932_-2095603013",
      "id": "20180322-142702_1178206254",
      "dateCreated": "Mar 22, 2018 2:27:02 PM",
      "dateStarted": "Mar 22, 2018 10:20:14 PM",
      "dateFinished": "Mar 22, 2018 10:20:15 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import com.esri.core.geometry.Point\n",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 10:20:19 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import com.esri.core.geometry.Point\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1521696672007_1609708972",
      "id": "20180322-143112_790799561",
      "dateCreated": "Mar 22, 2018 2:31:12 PM",
      "dateStarted": "Mar 22, 2018 10:20:19 PM",
      "dateFinished": "Mar 22, 2018 10:20:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "/*\n * Copyright 2015 and onwards Sanford Ryza, Uri Laserson, Sean Owen and Joshua Wills\n *\n * See LICENSE file for further information.\n */\n//package com.cloudera.datascience.geotime\n\nimport com.esri.core.geometry.{Geometry, GeometryEngine}\n\nimport spray.json._\n\ncase class Feature(id: Option[spray.json.JsValue],\n                   properties: Map[String, spray.json.JsValue],\n                   geometry: RichGeometry) {\n  def apply(property: String): spray.json.JsValue \u003d properties(property)\n  def get(property: String): Option[spray.json.JsValue] \u003d properties.get(property)\n}\n\ncase class FeatureCollection(features: Array[Feature])\n    extends IndexedSeq[Feature] {\n  def apply(index: Int): Feature \u003d features(index)\n  def length: Int \u003d features.length\n}\n\ncase class GeometryCollection(geometries: Array[RichGeometry])\n    extends IndexedSeq[RichGeometry] {\n  def apply(index: Int): RichGeometry \u003d geometries(index)\n  def length: Int \u003d geometries.length\n}\n\nobject GeoJsonProtocol extends DefaultJsonProtocol {\n  implicit object RichGeometryJsonFormat extends RootJsonFormat[RichGeometry] {\n    def write(g: RichGeometry): JsValue \u003d {\n      GeometryEngine.geometryToGeoJson(g.spatialReference, g.geometry).parseJson\n    }\n    def read(value: JsValue): RichGeometry \u003d {\n      val mg \u003d GeometryEngine.geometryFromGeoJson(value.compactPrint, 0, Geometry.Type.Unknown)\n      new RichGeometry(mg.getGeometry, mg.getSpatialReference)\n    }\n  }\n\n  implicit object FeatureJsonFormat extends RootJsonFormat[Feature] {\n    def write(f: Feature): JsObject \u003d {\n      val buf \u003d scala.collection.mutable.ArrayBuffer(\n        \"type\" -\u003e JsString(\"Feature\"),\n        \"properties\" -\u003e JsObject(f.properties),\n        \"geometry\" -\u003e f.geometry.toJson)\n      f.id.foreach(v \u003d\u003e { buf +\u003d \"id\" -\u003e v})\n      JsObject(buf.toMap)\n    }\n\n    def read(value: JsValue): Feature \u003d {\n      val jso \u003d value.asJsObject\n      val id \u003d jso.fields.get(\"id\")\n      val properties \u003d jso.fields(\"properties\").asJsObject.fields\n      val geometry \u003d jso.fields(\"geometry\").convertTo[RichGeometry]\n      Feature(id, properties, geometry)\n    }\n  }\n\n  implicit object FeatureCollectionJsonFormat extends RootJsonFormat[FeatureCollection] {\n    def write(fc: FeatureCollection): JsObject \u003d {\n      JsObject(\n        \"type\" -\u003e JsString(\"FeatureCollection\"),\n        \"features\" -\u003e JsArray(fc.features.map(_.toJson): _*)\n      )\n    }\n\n    def read(value: JsValue): FeatureCollection \u003d {\n      FeatureCollection(value.asJsObject.fields(\"features\").convertTo[Array[Feature]])\n    }\n  }\n\n  implicit object GeometryCollectionJsonFormat extends RootJsonFormat[GeometryCollection] {\n    def write(gc: GeometryCollection): JsObject \u003d {\n      JsObject(\n        \"type\" -\u003e JsString(\"GeometryCollection\"),\n        \"geometries\" -\u003e JsArray(gc.geometries.map(_.toJson): _*))\n    }\n\n    def read(value: JsValue): GeometryCollection \u003d {\n      GeometryCollection(value.asJsObject.fields(\"geometries\").convertTo[Array[RichGeometry]])\n    }\n  }\n}",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 10:20:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "import com.esri.core.geometry.{Geometry, GeometryEngine}\nimport spray.json._\n\u003cconsole\u003e:14: error: not found: type RichGeometry\n                          geometry: RichGeometry) {\n                                    ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1521696689506_-828044735",
      "id": "20180322-143129_615084968",
      "dateCreated": "Mar 22, 2018 2:31:29 PM",
      "dateStarted": "Mar 22, 2018 10:20:34 PM",
      "dateFinished": "Mar 22, 2018 10:20:35 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import spray.json.JsValue",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 2:42:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import spray.json.JsValue\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1521696755552_-1580705528",
      "id": "20180322-143235_105479966",
      "dateCreated": "Mar 22, 2018 2:32:35 PM",
      "dateStarted": "Mar 22, 2018 2:42:53 PM",
      "dateFinished": "Mar 22, 2018 2:42:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\ncase class Feature(id: Option[spray.json.JsValue],\n                   properties: Map[String, spray.json.JsValue],\n                   geometry: RichGeometry) {\n  def apply(property: String): spray.json.JsValue \u003d properties(property)\n  def get(property: String): Option[spray.json.JsValue] \u003d properties.get(property)\n}\n",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 2:45:48 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:39: error: object RichGeometry is not a member of package com.esri.core\n       import com.esri.core.RichGeometry\n              ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1521697320965_189737055",
      "id": "20180322-144200_1743865242",
      "dateCreated": "Mar 22, 2018 2:42:00 PM",
      "dateStarted": "Mar 22, 2018 2:45:31 PM",
      "dateFinished": "Mar 22, 2018 2:45:31 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import scala.collection.JavaConversions._\n\nobject EnvironmentVariables extends App {\n\n    val environmentVars \u003d System.getenv()\n    for ((k,v) \u003c- environmentVars) println(s\"key: $k, value: $v\")\n\n    val properties \u003d System.getProperties()\n    for ((k,v) \u003c- properties) println(s\"key: $k, value: $v\")\n\n}",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 3:26:25 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import scala.collection.JavaConversions._\ndefined object EnvironmentVariables\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1521697461508_72170813",
      "id": "20180322-144421_293484153",
      "dateCreated": "Mar 22, 2018 2:44:21 PM",
      "dateStarted": "Mar 22, 2018 3:26:25 PM",
      "dateFinished": "Mar 22, 2018 3:26:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "EnvironmentVariables.environmentVars",
      "user": "anonymous",
      "dateUpdated": "Mar 22, 2018 3:27:31 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res15: java.util.Map[String,String] \u003d null\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1521699985105_1239920354",
      "id": "20180322-152625_1809864784",
      "dateCreated": "Mar 22, 2018 3:26:25 PM",
      "dateStarted": "Mar 22, 2018 3:27:31 PM",
      "dateFinished": "Mar 22, 2018 3:27:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1521700019698_-1705301828",
      "id": "20180322-152659_1043558913",
      "dateCreated": "Mar 22, 2018 3:26:59 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "taxicab",
  "id": "2DAUAQPDE",
  "angularObjects": {
    "2DDH2WQSB:shared_process": [],
    "2DBBSXRRW:shared_process": [],
    "2DAPSSHCT:shared_process": [],
    "2DCR57YCT:shared_process": [],
    "2DAXDMBAJ:shared_process": [],
    "2DBRX1AQT:shared_process": [],
    "2DDRKEEGG:shared_process": [],
    "2DBUPDJFC:shared_process": [],
    "2DCE5XZDR:shared_process": [],
    "2DBVYT3CU:shared_process": [],
    "2DD3TM72G:shared_process": [],
    "2DAYVGWBM:shared_process": [],
    "2DAVW3PTU:shared_process": [],
    "2DDVJ4SYP:shared_process": [],
    "2DA9JSGRJ:shared_process": [],
    "2DBFUDA3G:shared_process": [],
    "2DDX9CBD7:shared_process": [],
    "2DCGM69PY:shared_process": []
  },
  "config": {},
  "info": {}
}